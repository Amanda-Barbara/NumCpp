
# set target name
IF (NOT DEFINED NUMPY2CPP_TENGINE_NAME)
    SET (NUMPY2CPP_TENGINE_NAME ${CMAKE_PROJECT_NAME} CACHE INTERNAL "" FORCE)
ENDIF()
MESSAGE (STATUS "CMAKE_PROJECT_NAME is ${CMAKE_PROJECT_NAME} ")
# clear all var
UNSET (TENGINE_COMMON_OPTIONS)
UNSET (NUMPY2CPP_HEADER_PATH)

UNSET (TENGINE_COMPILER_OPTIONS)



IF ((${CMAKE_BUILD_TYPE} MATCHES "Debug") OR (${CMAKE_BUILD_TYPE} MATCHES "DEBUG"))
    LIST (APPEND TENGINE_COMMON_OPTIONS "-g")
    LIST (APPEND TENGINE_COMMON_OPTIONS "-O0")

ELSEIF (TENGINE_GENERATE_DEBUG_SYMBOL)
    LIST (APPEND TENGINE_COMMON_OPTIONS "-g")
ENDIF()


FILE (GLOB NUMPY2CPP_CXX_API_SOURCE   "${CMAKE_SOURCE_DIR}/src/*.cpp")


# add header file searching path
LIST (APPEND NUMPY2CPP_HEADER_PATH        "${CMAKE_SOURCE_DIR}/src")
MESSAGE (STATUS "NUMPY2CPP_HEADER_PATH is ${NUMPY2CPP_HEADER_PATH} ")

#MESSAGE (STATUS "3RDPARTY_INCLUDE_PATH is ${3RDPARTY_INCLUDE_PATH} ")
#INCLUDE_DIRECTORIES(${3RDPARTY_INCLUDE_PATH})

# add compiler options
LIST (APPEND TENGINE_COMPILER_OPTIONS   ${TENGINE_COMMON_OPTIONS})
MESSAGE (STATUS "TENGINE_COMPILER_OPTIONS is ${TENGINE_COMPILER_OPTIONS} ")
MESSAGE (STATUS "NUMPY2CPP_CXX_API_SOURCE is ${NUMPY2CPP_CXX_API_SOURCE} ")

# add static and shared target
ADD_LIBRARY (${NUMPY2CPP_TENGINE_NAME}-static STATIC ${NUMPY2CPP_CXX_API_SOURCE})
ADD_LIBRARY (${NUMPY2CPP_TENGINE_NAME}        SHARED ${NUMPY2CPP_CXX_API_SOURCE})

# add source files to each target
#TARGET_SOURCES (${NUMPY2CPP_TENGINE_NAME}-static PUBLIC ${NUMPY2CPP_CXX_API_SOURCE})
#TARGET_SOURCES (${NUMPY2CPP_TENGINE_NAME}        PUBLIC ${NUMPY2CPP_CXX_API_SOURCE})

# add header file search path
TARGET_INCLUDE_DIRECTORIES (${NUMPY2CPP_TENGINE_NAME}-static PUBLIC ${NUMPY2CPP_HEADER_PATH})
TARGET_INCLUDE_DIRECTORIES (${NUMPY2CPP_TENGINE_NAME}        PUBLIC ${NUMPY2CPP_HEADER_PATH})

# add link libraries search path
#TARGET_LINK_DIRECTORIES (${NUMPY2CPP_TENGINE_NAME}-static PUBLIC ${3RDPARTY_LINK_PATH})
#TARGET_LINK_DIRECTORIES (${NUMPY2CPP_TENGINE_NAME}        PUBLIC ${3RDPARTY_LINK_PATH})

# add options
TARGET_COMPILE_OPTIONS (${NUMPY2CPP_TENGINE_NAME}-static PUBLIC $<$<OR:$<COMPILE_LANGUAGE:C>,$<COMPILE_LANGUAGE:CXX>>:${TENGINE_COMPILER_OPTIONS}>)
TARGET_COMPILE_OPTIONS (${NUMPY2CPP_TENGINE_NAME}        PUBLIC $<$<OR:$<COMPILE_LANGUAGE:C>,$<COMPILE_LANGUAGE:CXX>>:${TENGINE_COMPILER_OPTIONS}>)

# add link libraries
TARGET_LINK_LIBRARIES (${NUMPY2CPP_TENGINE_NAME}-static PUBLIC  ${3RDPARTY_LINK_LIBRARIES})
TARGET_LINK_LIBRARIES (${NUMPY2CPP_TENGINE_NAME}        PUBLIC  ${3RDPARTY_LINK_LIBRARIES})

# install tengine libraries
INSTALL (TARGETS ${CMAKE_PROJECT_NAME}-static DESTINATION ${CMAKE_SOURCE_DIR}/install/${ARCH_DIR}/lib)
INSTALL (TARGETS ${CMAKE_PROJECT_NAME}        DESTINATION ${CMAKE_SOURCE_DIR}/install/${ARCH_DIR}/lib)

# install header files
FILE (GLOB INSTALL_HEADER_LIST   "${CMAKE_SOURCE_DIR}/src/hyai_api*.h")
FOREACH(source ${INSTALL_HEADER_LIST})
    INSTALL (FILES ${source} DESTINATION ${CMAKE_SOURCE_DIR}/install/${ARCH_DIR}/include)
ENDFOREACH()

#INSTALL (FILES ${CMAKE_SOURCE_DIR}/src/hyai_common_box.hpp DESTINATION include)

# install test case code
FILE (GLOB INSTALL_EXAMPLE_LIST   "${CMAKE_SOURCE_DIR}/example/*.c")
FOREACH(source ${INSTALL_EXAMPLE_LIST})
    INSTALL (FILES ${source} DESTINATION ${CMAKE_SOURCE_DIR}/install/${ARCH_DIR}/example)
ENDFOREACH()
